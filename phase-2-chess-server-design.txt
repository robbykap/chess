actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group #navy Registration #white
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:FIND UserData FROM username
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:ADD UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:ADD AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group #orange Login #white
Client -> Server: [POST] /session\n{ "username":"", "password":"" }
Server -> Handler: { "username":"", "password":"" }
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username, password)
DataAccess -> db: GET userData FROM username
DataAccess --> Service: null
Service --> Handler:error
Handler --> Server: { "message": "Error: unauthorized" };\n{ "message": "Error: (description of error)" }
Server --> Client: [401] { "message": "Error: unauthorized" };\n[500] { "message": "Error: (description of error)" }
DataAccess --> Service:userData
Service -> DataAccess:createAuth(userData)
DataAccess -> db: ADD authData TO auth
Service --> Handler: LoginResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: [200} {"username" : " ", "authToken" : " "}
end

group #green Logout #white
Client -> Server: [DELETE] /session\n { "authToken":"" }
Server -> Handler: { "authToken":"" }
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: varifyAuth(authToken)
DataAccess -> db: GET authData FROM authToken
DataAccess --> Service: null
Service --> Handler:error
Handler --> Server: { "message": "Error: unauthorized" };\n{ "message": "Error: (description of error)" }
Server --> Client: [401] { "message": "Error: unauthorized" };\n[500] { "message": "Error: (description of error)" }
DataAccess --> Service: authData
Service -> DataAccess: deleteAuth(authData)
DataAccess -> db: DELETE authToken FROM auth
Service --> Handler: LogoutResult
Handler --> Server: {}
Server --> Client: [200} {}
end

group #red List Games #white
Client -> Server: [GET] /game\n { "authToken":"" }
Server -> Handler: { "authToken":"" }
Handler -> Service: listGames(ListGamesRequest)
Service -> DataAccess: varifyAuth(authToken)
DataAccess -> db: GET authData FROM authToken
DataAccess --> Service: null
Service --> Handler:error
Handler --> Server: { "message": "Error: unauthorized" };\n{ "message": "Error: (description of error)" }
Server --> Client: [401] { "message": "Error: unauthorized" };\n[500] { "message": "Error: (description of error)" }
DataAccess --> Service: authData
Service -> DataAccess: getGames()
DataAccess -> db: GET games
DataAccess --> Service: games
Service --> Handler: ListGamesResult
Handler --> Server: { "games": [{ "gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
Server --> Client: [200] { "games": [{ "gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
end

group #purple Create Game #white
Client -> Server: [POST] /game\n { "authToken":"", "gameName":"" }
Server -> Handler: { "authToken":"", "gameName":"" }
Handler -> Service: createGame(CreateGameRequest)
Service -> DataAccess: varifyAuth(authToken)
DataAccess -> db: GET authData FROM authToken
DataAccess --> Service: null
Service --> Handler:error
Handler --> Server: { "message": "Error: bad request" };\n{ "message": "Error: unauthorized" };\n{ "message": "Error: (description of error)" }
Server --> Client: [400] { "message": "Error: bad request" };\n[401] { "message": "Error: unauthorized" };\n[500] { "message": "Error: (description of error)" }
DataAccess --> Service: authData
Service -> DataAccess: createGame(game)
DataAccess -> db: INSERT game
DataAccess --> Service: gameID
Service --> Handler: CreateGameResult
Handler --> Server: { "gameID": 1234 }
Server --> Client: [200] { "gameID": 1234 }

end

group #yellow Join Game #black
Client -> Server: [PUT] /game\n { "authToken":"", "playerColor": "WHITE/BLACK", "gameID": 1234 }
Server -> Handler: { "authToken":"", "playerColor": "WHITE/BLACK", "gameID": 1234 }
Handler -> Service: joinGame(JoinGameRequest)
Service -> DataAccess: varifyAuth(authToken)
DataAccess -> db: GET authData FROM authToken
DataAccess --> Service: null
Service --> Handler:error
Handler --> Server: { "message": "Error: bad request" };\n{ "message": "Error: unauthorized" };\n{ "message": "Error: (description of error)" }
Server --> Client: [400] { "message": "Error: bad request" };\n[401] { "message": "Error: unauthorized" };\n[500] { "message": "Error: (description of error)" }
DataAccess --> Service: authData
Service -> DataAccess: getGame(gameID)
DataAccess -> db: GET gameData FROM gameID
DataAccess --> Service: gameData
Service --> Service: Set user from authData as\n"whiteUsername" or\n"blackUsername"
Service --> Handler:error
Handler --> Server: { "message": "Error: already taken" }
Server --> Client: [403] { "message": "Error: already taken" }
Service -> DataAccess: updateGame(gameData)
DataAccess -> db: UPDATE gameData
DataAccess --> Service: void
Service --> Handler: JoinGameResult
Handler --> Server: {}
Server --> Client: [200] {}
end

group #gray Clear application #white
Client -> Server: [DELETE] /db
Server -> Handler: {}
Handler -> Service: clearDB()
Service -> DataAccess: clearAuth()
DataAccess -> db: REMOVE AuthDAO
Service --> Handler:error
Handler --> Server: { "message": "Error: (description of error)" }
Server --> Client: [500] { "message": "Error: (description of error)" }
Service -> DataAccess: clearUsers()
DataAccess -> db: REMOVE UserDAO
Service --> Handler:error
Handler --> Server: { "message": "Error: (description of error)" }
Server --> Client: [500] { "message": "Error: (description of error)" }
Service -> DataAccess: clearGames()
DataAccess -> db: REMOVE GameDAO
Service --> Handler:error
Handler --> Server: { "message": "Error: (description of error)" }
Server --> Client: [500] { "message": "Error: (description of error)" }
DataAccess --> Service: void
Service --> Handler: ClearDBReuslt
Handler --> Server: {}
Server --> Client: [200] {}
end
